package ${package}.${moduleName}.controller;

import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import lombok.extern.slf4j.Slf4j;
import me.batizhao.common.core.util.R;
import ${package}.${moduleName}.domain.${className};
import ${package}.${moduleName}.service.${className}Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.Min;
import java.util.List;

/**
 * ${comments} API
 *
 * @module ${moduleName}
 *
 * @author ${author}
 * @since ${date}
 */
@Tag(name = "${comments}管理")
@RestController
@Slf4j
@Validated
@RequestMapping("${moduleName}")
public class ${className}Controller {

    @Autowired
    private ${className}Service ${classname}Service;
#if($template != "tree")

    /**
     * 分页查询${comments}
     * @param page 分页对象
     * @param ${classname} ${comments}
     * @return R
     * @real_return R<Page<${className}>>
     */
    @Operation(description = "分页查询${comments}")
    @GetMapping("/${mappingPath}s")
    @PreAuthorize("@pms.hasPermission('${moduleName}:${classname}:admin')")
    public R<IPage<${className}>> handle${className}s(Page<${className}> page, ${className} ${classname}) {
        return R.ok(${classname}Service.find${className}s(page, ${classname}));
    }
#end

    /**
     * 查询${comments}
     * @return R<List<${className}>>
     */
    @Operation(description = "查询${comments}")
    @GetMapping("/${mappingPath}")
    @PreAuthorize("@pms.hasPermission('${moduleName}:${classname}:admin')")
    public R<List<${className}>> handle${className}s(${className} ${classname}) {
#if($template == "tree")
        return R.ok(${classname}Service.find${className}Tree(${classname}));
#else
        return R.ok(${classname}Service.find${className}s(${classname}));
#end
    }

    /**
     * 通过id查询${comments}
     * @param ${pk.javaField} id
     * @return R
     */
    @Operation(description = "通过id查询${comments}")
    @GetMapping("/${mappingPath}/{${pk.javaField}}")
    @PreAuthorize("@pms.hasPermission('${moduleName}:${classname}:admin')")
    public R<${className}> handleId(@Parameter(name = "ID" , required = true) @PathVariable("${pk.javaField}") @Min(1) ${pk.javaType} ${pk.javaField}) {
        return R.ok(${classname}Service.findById(${pk.javaField}));
    }
###if(!$relationTable.isEmpty())
###foreach ($table in $relationTable)
###set($fk=$table.subTableFkName)
###if($fk.length() > 2 && $fk.substring(1,2).matches("[A-Z]"))
##    #set($AttrName=$fk)
###else
##    #set($AttrName=$fk.substring(0,1).toUpperCase() + ${fk.substring(1)})
###end
##
##    /**
##     * 通过${fk}查询${comments}
##     * @param ${fk}
##     * @return R
##     */
##    @Operation(description = "通过${fk}查询${comments}")
##    @GetMapping(value = "/${mappingPath}", params = "${fk}")
##    public R<List<${className}>> handle${AttrName}(@Parameter(name = "${fk}", required = true) @RequestParam String ${fk}) {
##        return R.ok(${classname}Service.list(Wrappers.<${className}>lambdaQuery().eq(${className}::get${AttrName}, ${fk})));
##    }
###end
###end

    /**
     * 添加或编辑${comments}
     * @param ${classname} ${comments}
     * @return R
     */
    @Operation(description = "添加或编辑${comments}")
    @PostMapping("/${mappingPath}")
    @PreAuthorize("@pms.hasPermission('${moduleName}:${classname}:add') or @pms.hasPermission('${moduleName}:${classname}:edit')")
    public R<${className}> handleSaveOrUpdate(@Valid @Parameter(name = "${comments}" , required = true) @RequestBody ${className} ${classname}) {
        return R.ok(${classname}Service.saveOrUpdate${className}(${classname}));
    }

    /**
     * 通过id删除${comments}
#if($template != "tree")
     * @param ids ID串
#else
     * @param id ID
#end
     * @return R
     */
    @Operation(description = "通过id删除${comments}")
    @DeleteMapping("/${mappingPath}")
    @PreAuthorize("@pms.hasPermission('${moduleName}:${classname}:delete')")
#if($template != "tree")
    public R<Boolean> handleDelete(@Parameter(name = "ID串" , required = true) @RequestParam List<Long> ids) {
#else
    public R<String> handleDelete(@Parameter(name = "ID", required = true) @RequestParam Integer id) {
#end
#if($template != "tree")
        return R.ok(${classname}Service.removeByIds(ids));
#else
        return ${classname}Service.deleteById(id) ? R.ok() : R.failed("存在子${comments}不允许删除！");
#end
    }

#foreach ($column in $columns)
#if($column.name == "status")
    /**
     * 更新${comments}状态
     *
     * @param ${classname} ${comments}
     * @return R
     */
    @Operation(description = "更新${comments}状态")
    @PostMapping("/${mappingPath}/status")
    @PreAuthorize("@pms.hasPermission('${moduleName}:${classname}:admin')")
    public R<Boolean> handleUpdateStatus(@Parameter(name = "${comments}" , required = true) @RequestBody ${className} ${classname}) {
        return R.ok(${classname}Service.updateStatus(${classname}));
    }
#end
#end

}
