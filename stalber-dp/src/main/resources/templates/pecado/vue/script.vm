<script>
import {#if($template != "tree") list${className}s,#end list${className}, get${className}, delete${className}, addOrUpdate${className}, change${className}Status } from "@/api/${moduleName}/${mappingPath}";
import { downLoadExcel } from "@/utils/download";
#if($form == "visual")
import { getFormByKey } from "@/api/dp/form";
import Parse from '@/components/CodeEditor/components/parser/Parser.vue'
#end
#if($template == "tree")
import Treeselect from "@riophae/vue-treeselect";
import "@riophae/vue-treeselect/dist/vue-treeselect.css";
#end
#foreach($column in $columns)
#if($column.save && !$column.primaryKey && $column.htmlType == "imageUpload")
import ImageUpload from '@/components/ImageUpload';
#break
#end
#end
#foreach($column in $columns)
#if($column.save && !$column.primaryKey && $column.htmlType == "fileUpload")
import FileUpload from '@/components/FileUpload';
#break
#end
#end
#foreach($column in $columns)
#if($column.save && !$column.primaryKey && $column.htmlType == "editor")
import Editor from '@/components/Editor';
#break
#end
#end
#if($workflow == "yes")
import { getProcessDefinition } from "@/api/oa/task";
import ExamineDialog from '@/views/oa/task/examine-dialog/index.vue'
#end

export default {
  name: "${className}",
  components: {
#if($template == "tree")
    Treeselect,
#end
#if($form == "visual")
    Parse,
#end
#if($workflow == "yes")
    ExamineDialog,
#end  
#foreach($column in $columns)
#if($column.save && !$column.primaryKey && $column.htmlType == "imageUpload")
    ImageUpload,
#break
#end
#end
#foreach($column in $columns)
#if($column.save && !$column.primaryKey && $column.htmlType == "fileUpload")
    FileUpload,
#break
#end
#end
#foreach($column in $columns)
#if($column.save && !$column.primaryKey && $column.htmlType == "editor")
    Editor,
#break
#end
#end
  },
  data() {
    return {
#if($form == "visual")
      jsonData: {},
      editData: {},
      formKey: null,
#end
      // 遮罩层
      loading: true,
#if($template != "tree")      
      // 选中数组
      ids: [],
      // 当前id
      id: null,
      // 非单个禁用
      single: true,
      // 非多个禁用
      multiple: true,
      // 总条数
      total: 0,
#end      
      // 显示搜索条件
      showSearch: true,
      // ${comments}表格数据
      ${classname}List: [],
#if($template == "tree")
      // ${comments}树选项
      ${classname}Options: [],
#end
      // 弹出层标题
      title: "",
      // 是否显示弹出层
      open: false,
#foreach ($column in $columns)
#set($parentheseIndex=$column.columnComment.indexOf("（"))
#if($parentheseIndex != -1)
#set($comment=$column.columnComment.substring(0, $parentheseIndex))
#else
#set($comment=$column.columnComment)
#end
#if(${column.dictType} != '')
      // $comment字典
      ${column.javaField}Options: [],
#elseif($column.htmlType == "datetime" && $column.searchType == "BETWEEN")
#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
      // $comment时间范围
      daterange${AttrName}: [],
#end
#end
      // 查询参数
      queryParams: {
#if($template != "tree")      
        current: 1,
        size: 10,
#end        
#foreach ($column in $columns)
#if($column.search)
        $column.javaField: null#if($velocityCount != $columns.size()),#end
#end
#end
      },
      // 表单参数
      form: {},
#if($form != "visual")      
      // 表单校验
      rules: {
#if($template == "tree")
        pid: [
          { required: true, message: "上级${comments}不能为空", trigger: "blur" }
        ],
#end
#foreach ($column in $columns)
#if($column.required && $column.save)
#set($parentheseIndex=$column.columnComment.indexOf("（"))
#if($parentheseIndex != -1)
#set($comment=$column.columnComment.substring(0, $parentheseIndex))
#else
#set($comment=$column.columnComment)
#end
        $column.javaField: [
          { required: true, message: "$comment不能为空", trigger: #if($column.htmlType == "select")"change"#else"blur"#end }
        ]#if($velocityCount != $columns.size()),#end
#end
#end
      }
#end
#if($workflow == "yes")
      //流程数据
      processDefinitionData: {},
      //业务数据
      invoiceData: {},
      //步骤数
      active: 0,
#end      
    };
  },
  created() {
#if(!$relationTable.isEmpty())
    this.queryParams.${relationTable[0].subTableFkName} = this.$route.params && this.$route.params.${relationTable[0].subTableFkName};
#end
    this.getList();
#if($form == "visual")
#if($workflow == "yes")
    getProcessDefinition('${workflowKey}').then(response => {
      this.processDefinitionData = response.data || {};
      this.formKey = this.processDefinitionData.view.config.config.form.pcPath;
#end     
      getFormByKey(this.formKey || '${formKey}').then(res => {
        const formObj = JSON.parse(res.data.metadata || '{}');
        this.jsonData = formObj.formData || {};
      });
#if($workflow == "yes")      
    });
#end      
#end
#foreach ($column in $columns)
#if(${column.dictType} != '')
    this.listDictDataByCode("${column.dictType}").then(response => {
      this.${column.javaField}Options = response.data;
    });
#end
#end
  },
  methods: {
    /** 查询${comments}列表 */
    getList() {
      this.loading = true;
#foreach ($column in $columns)
#if($column.htmlType == "datetime" && $column.searchType == "BETWEEN")
      this.queryParams.params = {};
#break
#end
#end
#foreach ($column in $columns)
#if($column.htmlType == "datetime" && $column.searchType == "BETWEEN")
#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
      if (null != this.daterange${AttrName} && '' != this.daterange${AttrName}) {
        this.queryParams.params["begin${AttrName}"] = this.daterange${AttrName}[0];
        this.queryParams.params["end${AttrName}"] = this.daterange${AttrName}[1];
      }
#end
#end
#if($template != "tree")
      list${className}s(this.queryParams).then(response => {
#else
      list${className}(this.queryParams).then(response => {
#end
#if($template != "tree")
        this.${classname}List = response.data.records;
        this.total = response.data.total;
#else
        this.${classname}List = response.data;
#end
        this.loading = false;
      });
    },
    // ${comments}状态编辑
    handleStatusChange(row) {
      let text = row.status === "open" ? "启用" : "停用";
      this.$confirm('确认要"' + text + '""' + row.name + '"吗?', "警告", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      }).then(function() {
        return change${className}Status(row.id, row.status);
      }).then(() => {
        this.msgSuccess(text + "成功");
      }).catch(function() {
        row.status = row.status === "open" ? "close" : "open";
      });
    },
#if($template == "tree")     
    /** 转换${comments}数据结构 */
    normalizer(node) {
      if (node.children && !node.children.length) {
        delete node.children;
      }
      return {
        id: node.id,
        label: node.name,
        children: node.children
      };
    },
    /** 查询${comments}下拉树结构 */
    getTreeselect() {
      list${className}().then(response => {
        this.${classname}Options.children = this.handleTree(response.data, "id");
      });
    },
#end    
#foreach ($column in $columns)
#if(${column.dictType} != '')
#set($parentheseIndex=$column.columnComment.indexOf("（"))
#if($parentheseIndex != -1)
#set($comment=$column.columnComment.substring(0, $parentheseIndex))
#else
#set($comment=$column.columnComment)
#end
    // $comment字典翻译
    ${column.javaField}Format(row, column) {
      return this.selectDictLabel#if($column.htmlType == "checkbox")s#end(this.${column.javaField}Options, row.${column.javaField});
    },
#end
#end
    // 取消按钮
    cancel() {
      this.open = false;
      this.reset();
    },
    // 表单重置
    reset() {
      this.form = {};
#if($form != "visual")
      this.resetForm("form");
#end
    },
    /** 搜索按钮操作 */
    handleQuery() {
#if($template != "tree")     
      this.queryParams.current = 1;
#end      
      this.getList();
    },
    /** 重置按钮操作 */
    resetQuery() {
#foreach ($column in $columns)
#if($column.htmlType == "datetime" && $column.searchType == "BETWEEN")
#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
      this.daterange${AttrName} = [];
#end
#end
      this.resetForm("queryForm");
      this.handleQuery();
    },
#if($template != "tree")    
    // 多选框选中数据
    handleSelectionChange(selection) {
      this.ids = selection.map(item => item.${pk.javaField})
      this.single = selection.length!==1
      this.multiple = !selection.length
    },    
    /** 添加按钮操作 */
#if($workflow == "yes")    
    handleAdd() {
      this.reset();
      this.title = "添加${comments}";
      this.active = 0;
      this.$forceUpdate();
      this.$nextTick( () => {
        this.open = true;
      })
    },
#else
    handleAdd() {
      this.reset();
      this.open = true;
      this.title = "添加${comments}";
    },    
#end    
    /** 编辑按钮操作 */
    handleUpdate(row) {
      this.reset();
      this.${pk.javaField} = row.${pk.javaField} || this.ids
      get${className}(this.${pk.javaField}).then(response => {
#if($form == "visual")     
        this.editData = response.data;
#else
        this.form = response.data;
#end 
#foreach ($column in $columns)
#if($column.htmlType == "checkbox")
        this.form.$column.javaField = this.form.${column.javaField}.split(",");
#end
#end
        this.open = true;
        this.title = "编辑${comments}";
      });
    },
#else
    /** 添加按钮操作 */
    handleAdd(row) {
      this.reset();
      this.getTreeselect();
      if (row != undefined) {
        this.form.pid = row.id;
      }
      this.open = true;
      this.title = "添加${comments}";
    },
    /** 编辑按钮操作 */
    handleUpdate(row) {
      this.reset();
      this.getTreeselect();
      get${className}(row.id).then(response => {
        this.form = response.data;
        this.open = true;
        this.title = "编辑${comments}";
      });
    },
#end    
#if($template == "onetomany")
#set($pu = ".push")
    /** 详情按钮操作 */
    handleDetail(row) {
      const ${subTableFkName} = row.${subTableFkName};
      this.$router${pu}("/${subMappingPath}/" + ${subTableFkName});
    },
#end
    /** 提交按钮 */
#if($workflow == "yes")
    submitForm() {
      this.#[[$]]#refs.examineDialog.getExamineData().then( flowData => {
        const submitData = { 
          task: { 
            processNodeDTO: flowData.processNodeDTO
          } 
        };
        let { dto, view } = this.processDefinitionData;
        submitData.task.current = view.dto.id;
        submitData.task.processDefinitionId = dto.id;
        Object.assign(submitData, this.invoiceData);
        submitData.task.id = undefined;
        console.log("submitData:", submitData);

        addOrUpdate${className}(submitData).then(response => {
          this.msgSuccess("保存成功");
          this.getList();
          this.open = false;
        });
      });
    },
    /**拟稿弹框下一步 */
    nextStep(){
      this.#[[$]]#refs.form.submitForm().then(data => {
        this.active = 1;
        this.invoiceData = data;
        const examineData = {
          processDefinitionId: this.processDefinitionData.dto.id,
          taskDefKey: this.processDefinitionData.view.dto.id
        }
        this.#[[$]]#nextTick( () => {
          this.#[[$]]#refs.examineDialog.show(examineData);
        })
      }).catch( err => {
        console.log(err);
      })
    },
    /**拟稿弹框上一步 */
    preStep(){
      this.active = 0;
    },
#else    
#if($form == "visual")
    submitForm() {
      this.#[[$]]#refs.form.submitForm().then(data => {
        data.id = this.id;
        addOrUpdate${className}(data).then(response => {
          this.msgSuccess("保存成功");
          this.open = false;
          this.getList();
        });
      });
    },
#else
    submitForm() {
      this.#[[$]]#refs.form.validate(valid => {
        if (valid) {
#if(!$relationTable.isEmpty())
          this.form.${relationTable[0].subTableFkName} = this.$route.params && this.$route.params.${relationTable[0].subTableFkName};
#end
#foreach ($column in $columns)
#if($column.htmlType == "checkbox")
          this.form.$column.javaField = this.form.${column.javaField}.join(",");
#end
#end
          addOrUpdate${className}(this.form).then(response => {
            this.msgSuccess("保存成功");
            this.open = false;
            this.getList();
          });
        }
      });
    },
#end
#end
    /** 删除按钮操作 */
    handleDelete(row) {
      const ${pk.javaField}s = row.${pk.javaField}#if($template != "tree") || this.ids#end;
      this.$confirm('是否确认删除${comments}编号为"' + ${pk.javaField}s + '"的数据项?', "警告", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      }).then(function() {
        return delete${className}(${pk.javaField}s);
      }).then(() => {
        this.getList();
        this.msgSuccess("删除成功");
      }).catch(error => {
        reject(error)
      })
    },
    /** 导出按钮操作 */
    handleExport() {
      const queryParams = this.queryParams;
      this.$confirm('是否确认导出所有${comments}数据项?', "警告", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      }).then(function() {
        downLoadExcel("/${moduleName}/${mappingPath}/export", queryParams);
      })
    }
  }
};
</script>